import subprocess
import wolframalpha
import pyttsx3
import tkinter
import json
import random
import operator
import speech_recognition as sr
import datetime
import wikipedia
import webbrowser
import os
import winshell
import pyjokes
import feedparser
import smtplib
import ctypes
import time
import requests
import shutil
from twilio.rest import Client
from clint.textui import progress
from ecapture import ecapture as ec
from bs4 import BeautifulSoup
import win32com.client as wincl
from urllib.request import urlopen

engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)

def speak(audio):
    engine.say(audio)
    engine.runAndWait()
 
def wishMe():
    hour = int(datetime.datetime.now().hour)
    if hour>= 0 and hour<12:
        speak("bonjour monsieur")
  
    elif hour>= 12 and hour<18:
        speak("bon apres-midi monsieur")   
  
    else:
        speak("bon soire monsieur")  
  
    assname =("Jarvis 1 point o")
    speak("I am your Assistant Jarvis")
    speak(assname)
     
 
def usrname():
    speak("Comment dois-je vous appeler monsieur")
    uname = takeCommand()
    speak("Welcome Mister")
    speak(uname)
    columns = shutil.get_terminal_size().columns
     
    print("#####################".center(columns))
    print("Welcome Mr.", uname.center(columns))
    print("#####################".center(columns))
     
    speak("comment je peux vous aider")
 
def takeCommand():
     
    r = sr.Recognizer()
     
    with sr.Microphone() as source:
         
        print("Listening...")
        r.pause_threshold = 1
        audio = r.listen(source)
  
    try:
        print("Recognizing...")    
        query = r.recognize_google(audio, language ='en-in')
        print(f"User said: {query}\n")
  
    except Exception as e:
        print(e)    
        print("Unable to Recognize your voice.")  
        return "None"
     
    return query
  
def sendEmail(to, content):
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.ehlo()
    server.starttls()
     
    
    server.login('your email id', 'your email passowrd')
    server.sendmail('your email id', to, content)
    server.close()

    if __name__ == '__main__':
     clear = lambda: os.system('cls')
     
    
    
    clear()
    wishMe()
    usrname()
     
    while True:
         
        query = takeCommand().lower()
         
        
        
        
        
        if 'ouvre wikipedia' in query:
            speak('Searching Wikipedia...')
            query = query.replace("wikipedia", "")
            results = wikipedia.summary(query, sentences = 3)
            speak("D'après Wikipédia")
            print(results)
            speak(results)
 
        elif 'ouvre youtube' in query:
            speak("Ici vous allez sur Youtube\n")
            webbrowser.open("youtube.com")
 
        elif 'ouvre google' in query:
            speak("Ici vous allez sur Google\n")
            webbrowser.open("google.com")
 
        elif 'ouvre stackoverflow' in query:
            speak("Ici, vous allez à Stack Over flow.Happy coding")
            webbrowser.open("stackoverflow.com")   
 
        elif 'joue de la music' in query or "mes su song" in query:
            speak("Voilà avec la musique")
            
            music_dir = "C:\\Users\\GAURAV\\Music"
            songs = os.listdir(music_dir)
            print(songs)    
            random = os.startfile(os.path.join(music_dir, songs[1]))
 
        elif 'il est quel heure' in query:
            strTime = datetime.datetime.now().strftime("% H:% M:% S")    
            speak(f"Monsieur, il est {strTime}")
 
        elif 'ouvre opera' in query:
            codePath = r"C:\\Users\\GAURAV\\AppData\\Local\\Programs\\Opera\\launcher.exe"
            os.startfile(codePath)
 
        elif 'ouvre mon adresse mail' in query:
            try:
                speak("Qu'est-ce que je devrais dire?")
                content = takeCommand()
                to = "Receiver email address"   
                sendEmail(to, content)
                speak("L'email a été envoyé !")
            except Exception as e:
                print(e)
                speak("Je n'arrive pas à envoyer cet email")
 
        elif 'envoyer un courrier' in query:
            try:
                speak("Qu'est-ce que je devrais dire?")
                content = takeCommand()
                speak("à qui dois-je envoyer")
                to = input()    
                sendEmail(to, content)
                speak("L'email a été envoyé !")
            except Exception as e:
                print(e)
                speak("Je n'arrive pas à envoyer cet email")
 
        elif 'comment tu va' in query:
            speak("je vais bien, merci")
            speak("comment aler vous monsieur")
 
        elif 'bien' in query or "sa va" in query or "je vais bien" in query:
            speak("C'est bon de savoir que tu vas bien")
 
        elif "changer mon nom en" in query:
            query = query.replace("change my name to", "")
            assname = query
 
        elif "changer de nom" in query:
            speak("Comment voulez-vous m'appeler, monsieur ")
            assname = takeCommand()
            speak("Merci de m'avoir nommé")
 
        elif "quel est votre nom" in query or "Quel est ton nom" in query:
            speak("Mes amis m'appellent")
            speak(assname)
            print("My friends call me", assname)
 
        elif 'sortir' in query:
            speak("Merci de m'avoir accordé de votre temps")
            exit()
 
        elif "qui t'a fait" in query or "qui t'a créé" in query: 
            speak("J'ai été créé par Nathan.")
             
        elif 'fait moi une blage' in query:
            speak(pyjokes.get_joke())
             
        elif "calcule" in query: 
             
            app_id = "Wolframalpha api id"
            client = wolframalpha.Client(app_id)
            indx = query.lower().split().index('calculate') 
            query = query.split()[indx + 1:] 
            res = client.query(' '.join(query)) 
            answer = next(res.results).text
            print("The answer is " + answer) 
            speak("The answer is " + answer) 
 
        elif 'chercher' in query or 'jouer' in query:
             
            query = query.replace("search", "") 
            query = query.replace("play", "")          
            webbrowser.open(query) 
 
        elif "qui suis-je" in query:
            speak("Si vous parlez, alors certainement un humain.")
 
        elif "pourquoi tu es venu au monde" in query:
            speak("Merci à nathan. c'est un secret")
 
        elif 'trouve mois le patch 4 jiga' in query:
            speak("ouverture du patche")
            power = r"D:\divertisement\\J.A.R.V.I.S\\complement\\4gb_patch.zip\\4gb_patch.exe"
            os.startfile(appli)
 
        elif 'c est l amour' in query:
            speak("C'est le 7ème sens qui détruit tous les autres sens")
 
        elif "qui es-tu" in query:
            speak("je suis votre assitant")
 
        elif 'raison pour toi' in query:
            speak("J'ai été créé en tant que projet IA par nathan ")
 
        elif 'changement de fond' in query:
            ctypes.windll.user32.SystemParametersInfoW(20, 
                                                       0, 
                                                       "Location of wallpaper",
                                                       0)
            speak("L'arrière-plan a bien été modifié")
 
        elif 'ouvre brave' in query:
            appli = r"D:\divertisement\\J.A.R.V.I.S\\complement\brave\brave.exe"
            os.startfile(appli)
 
        elif 'nouvauter' in query:
             
            try: 
                jsonObj = urlopen()
                data = json.load(jsonObj)
                i = 1
                 
                speak('voici quelques nouvelles de lépoque de linde')
                print(+ '\n')
                 
                for item in data['articles']:
                     
                    print(str(i) + '. ' + item['title'] + '\n')
                    print(item['description'] + '\n')
                    speak(str(i) + '. ' + item['title'] + '\n')
                    i += 1
            except Exception as e:
                 
                print(str(e))
 
         
        elif 'verrouiller la fenêtre' in query:
                speak("locking the device")
                ctypes.windll.user32.LockWorkStation()
 
        elif 'shutdown le system' in query:
                speak("Attends une seconde ! Votre système est sur le point de s'arrêter")
                subprocess.call('shutdown / p /f')
                 
        elif 'poubelle de recyclage vide' in query:
            winshell.recycle_bin().empty(confirm = False, show_progress = False, sound = True)
            speak("j'ai vider la poubel")
 
        elif "n'écoute pas" in query or "arrête d'écouter" in query:
            speak("pendant combien de temps vous voulez empêcher jarvis d'écouter les commandes")
            a = int(takeCommand())
            time.sleep(a)
            print(a)
 
        elif "où se trouve" in query:
            query = query.replace("où se trouve", "")
            location = query
            speak("User asked to Locate")
            speak(location)
            webbrowser.open("https://www.google.nl / maps / place/" + location + "")
 
        elif "camera" in query or "prend une photo" in query:
            ec.capture(0, "Jarvis Camera ", "img.jpg")
 
        elif "restart" in query:
            subprocess.call(["shutdown", "/r"])
             
        elif "hiberner" in query or "dores" in query:
            speak("Hibernation")
            subprocess.call("shutdown / h")
 
        elif "se déconnecter" in query or "se déconnecter" in query:
            speak("Assurez-vous que toutes les applications sont fermées avant de vous déconnecter")
            time.sleep(5)
            subprocess.call(["shutdown", "/l"])
 
        elif "écrire une note" in query:
            speak("Que dois-je écrire, monsieur")
            note = takeCommand()
            file = open('jarvis.txt', 'w')
            speak("Monsieur, Dois-je inclure la date et l'heure")
            snfm = takeCommand()
            if 'oui' in snfm or 'non' in snfm:
                strTime = datetime.datetime.now().strftime("% H:% M:% S")
                file.write(strTime)
                file.write(" :- ")
                file.write(note)
            else:
                file.write(note)
         
        elif "afficher la note" in query:
            speak("Affichage des note")
            file = open("jarvis.txt", "r") 
            print(file.read())
            speak(file.read(6))
 
        elif "assistant de mise à jour" in query:
            speak("Après avoir téléchargé le fichier, veuillez remplacer ce fichier par celui téléchargé")
            url = '# url after uploading file'
            r = requests.get(url, stream = True)
             
            with open("Voice.py", "wb") as Pypdf:
                 
                total_length = int(r.headers.get('content-length'))
                 
                for ch in progress.bar(r.iter_content(chunk_size = 2391975),
                                       expected_size =(total_length / 1024) + 1):
                    if ch:
                      Pypdf.write(ch)
                     
        
        elif "jarvis" in query:
             
            wishMe()
            speak("Jarvis 1 point o à votre service Monsieur")
            speak(assname)
 
        elif "la météo" in query:
             
            
            
            api_key = "Api key"
            base_url = "http://api.openweathermap.org / data / 2.5 / weather?"
            speak("quel est le nom de votre ville ")
            print("City name : ")
            city_name = takeCommand()
            complete_url = base_url + "appid =" + api_key + "&q =" + city_name
            response = requests.get(complete_url) 
            x = response.json() 
             
            if x["cod"] != "404": 
                y = x["main"] 
                current_temperature = y["temp"] 
                current_pressure = y["pressure"] 
                current_humidiy = y["humidity"] 
                z = x["weather"] 
                weather_description = z[0]["description"] 
                print(" Temperature (in kelvin unit) = " +str(current_temperature)+"\n atmospheric pressure (in hPa unit) ="+str(current_pressure) +"\n humidity (in percentage) = " +str(current_humidiy) +"\n description = " +str(weather_description)) 
             
            else: 
                speak(" Ville introuvable ")
             
        elif "envoyer le message " in query:
                
                account_sid = 'Account Sid key'
                auth_token = 'Auth token'
                client = Client(account_sid, auth_token)
 
                message = client.messages \
                                .create(
                                    body = takeCommand(),
                                    from_='Sender No',
                                    to ='Receiver No'
                                )
 
                print(message.sid)
 
        elif "wikipedia" in query:
            webbrowser.open("wikipedia.com")
 
        elif "Bonjour" in query:
            speak("Un chaleureux" +query)
            speak("Comment allez-vous Monsieur")
            speak(assname)
 
        
        elif "veux-tu être ma petite amie" in query or "veux-tu être mon petit ami" in query:   
            speak("Je ne suis pas sûr, peut-être devriez-vous me donner un peu de temps")
 
        elif "how are you" in query:
            speak("Je vais bien, je suis content que tu m'aies")
 
        elif "Je vous aime" in query:
            speak("C'est difficile à comprendre")
 
        elif "Qu'est-ce que" in query or "qui est" in query:
             
            
            
            client = wolframalpha.Client("API_ID")
            res = client.query(query)
             
            try:
                print (next(res.results).text)
                speak (next(res.results).text)
            except StopIteration:
                print ("No results")
 
